#!/usr/bin/python -tt
import requests
import datetime
import json
import uuid

def has_nones(d, prefix=""):
    fields = []
    for key, value in d.iteritems():
        if isinstance(value, dict):
            fields.extend(has_nones(value, prefix="%s.%s" % (prefix, key)))
        if value is None:
            fields.append(key)
    return fields

def dict_diff(d1, d2):
    for key, val in d1.iteritems():
        if isinstance(val, dict):
            if dict_diff(val, d2.get(key, {})):
                return True
            continue
        if val != d2.get(key, None):
            return True
    return False

def main():
    module = AnsibleModule(
        argument_spec = dict(
            state = dict(type='str', default='present', choices=['present', 'absent']),
            servers = dict(type='list', default=['sot-example-app1.fqdn.tld', 'sot-example-app2.fqdn.tld', 'sot-example-app3.fqdn.tld']),
            username = dict(type='str', required=True),
            password = dict(type='str', required=True, no_log=True),
            service_tag = dict(type='str'),
            asset_type = dict(type='str', required=False),
            parent = dict(type='str', required=False),
            log = dict(type='str', required=False),
            owner = dict(type='str', required=False),
            owner_can_login = dict(type='bool', default=True),
            managers = dict(type='list', required=False, default=[]),
            users = dict(type='list', required=False),
            hyperthreading = dict(type='bool', default=False),
            os = dict(type='str', required=False),
            vlan = dict(type='raw', required=False),
            vlans = dict(type='list', default=[]),
            hostname = dict(type='str', required=False),
            ram = dict(type='int', required=False),
            cpus = dict(type='int', required=False),
            storage = dict(type='dict', required=False),
            ldaplocal = dict(type='bool', default=False),
            wait = dict(type='bool', default=True),
            wait_event = dict(type='str', default=None),
            aliases = dict(type='list', default=[]),
            tasksequence = dict(type='str'),
            mdtcust = dict(type='str'),
            asset_subtype = dict(type='str', required=False),
            nics = dict(type='list', default=[]),
            hypervisors = dict(type='list', default=[]),
            url = dict(type='str'),
            additional_vlans = dict(type='list', default=[]),
            inventory_id = dict(type='str', required=True),
        ),
        supports_check_mode = True
    )

    changed = False
    req_args = {
        'auth': (module.params['username'], module.params['password']),
        'headers': {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        },
    }
    def request(method, path, data=None):
        method_fun = getattr(requests, method)
        exc = None
        for server in module.params['servers']:
            try:
                url = "https://%s%s" % (server, path)
                if data:
                    response = method_fun(url, data=json.dumps(data), **req_args)
                else:
                    response = method_fun(url, **req_args)
                if response.status_code >= 500 and response.status_code < 600:
                    pass
                else:
                    return response
            except requests.exceptions.RequestException as e:
                exc = e
        module.fail_json(msg="Failed to talk to socrates: %s" % exc)

    start_time = datetime.datetime.utcnow()

    if 'service_tag' not in module.params or not module.params['service_tag']:
        if module.params['state'] == 'present' and module.params['asset_type'] == 'vm':
            response = request('get', '/asset/?provision__hostname=%s' % module.params['hostname'])
            if response.status_code != 200:
                module.fail_json(msg='Unable to determine service tag: %d %s' % (response.status_code, response.content))
            data = json.loads(response.content)
            for asset in data:
                if asset['state'] in ('ready', 'in-use'):
                    module.params['service_tag'] = asset['service_tag']
                    break
            else:
                module.params['service_tag'] = "service-" + str(uuid.uuid4())
        else:
            module.fail_json(msg='service_tag is required')

    response = request('get', '/asset/%s' % module.params['service_tag'])
    if module.params['state'] == 'present':
        vlans = []
        for vlan in module.params['vlans']:
            if isinstance(vlan, dict):
                vlans.append(vlan)
            else:
                vlans.append({'cidr': vlan})
        vlan = {}
        if isinstance(module.params['vlan'], dict):
            vlan = module.params['vlan']
        else:
            vlan = {'cidr': module.params['vlan']}

        if response.status_code == 404:
            changed = True
            if module.params['asset_type'] == 'vm':
                asset = {
                    'version': 1,
                    'log': module.params['log'],
                    'state': 'ready',
                    'asset_type': module.params['asset_type'],
                    'service_tag': module.params['service_tag'],
                    'parent': module.params['parent'],
                    'owner': module.params['owner'],
                    'owner_can_login': module.params['owner_can_login'],
                    'managers': module.params['managers'],
                    'provision': {
                        'os': module.params['os'],
                        'hostname': module.params['hostname'],
                        'vlan': vlan,
                        'vlans': vlans,
                        'ram': module.params['ram'],
                        'cpus': module.params['cpus'],
                        'storage': module.params['storage'],
                        'ldaplocal': module.params['ldaplocal'],
                        'aliases': module.params['aliases'],
                    },
                    'provisioning': True,
                    'inventory_id': module.params['inventory_id'],
                }
                for tag in ('tasksequence', 'mdtcust'):
                    if module.params[tag]:
                        asset['provision'][tag] = module.params[tag]
                if module.params['users'] is not None:
                    asset['users'] = module.params['users']
                missing = has_nones(asset)
                if missing:
                    module.fail_json(msg="Missing required fields: %s" % ", ".join(missing))
                if module.params['wait_event'] is None:
                    module.params['wait_event'] = 'provisioned'
                if not module.check_mode:
                    response = request('post', '/asset/', asset)
                    if response.status_code != 201:
                        module.fail_json(msg="Failed to create VM: %s" % response.content)
                    asset = json.loads(response.content)
            elif module.params['asset_type'] == 'vmcluster':
                for required_field in ['hypervisors', 'asset_subtype', 'url', 'storage']:
                    if not module.params[required_field]:
                        module.fail_json(msg="%s is required to create vmcluster")
                asset = {
                    'version': 1,
                    'log': module.params['log'],
                    'state': 'in-use',
                    'asset_type': module.params['asset_type'],
                    'asset_subtype': module.params['asset_subtype'],
                    'service_tag': module.params['service_tag'],
                    'parent': module.params['parent'],
                    'owner': module.params['owner'],
                    'managers': module.params['managers'],
                    'storage': [module.params['storage']],
                    'hypervisors': module.params['hypervisors'],
                    'url': module.params['url'],
                    'inventory_id': module.params['inventory_id'],
                }
                if module.params['users'] is not None:
                    asset['users'] = module.params['users']
                if module.params['nics']:
                    asset['nics'] = module.params['nics']
                if not module.check_mode:
                    response = request('post', '/asset/', asset)
                    if response.status_code != 201:
                        module.fail_json(msg="Failed to create VM: %s" % response.content)
                    asset = json.loads(response.content)
                module.params['wait'] = False
            else:
                module.fail_json(msg="Service tag %s does not exist" % (module.params['service_tag']))
        elif response.status_code == 200:
            asset = json.loads(response.content)
            if asset['state'] == 'ready':
                update = {
                    'version': asset['version'],
                    'log': module.params['log'],
                    'owner_can_login': module.params['owner_can_login'],
                    'managers': module.params['managers'],
                    'provisioning': True,
                    'provision': {
                        'hyperthreading': module.params['hyperthreading'],
                        'os': module.params['os'],
                        'hostname': module.params['hostname'],
                        'vlan': vlan,
                        'vlans': vlans,
                        'storage': module.params['storage'],
                        'aliases': module.params['aliases'],
                        'ldaplocal': module.params['ldaplocal'],
                    },
                    'inventory_id': module.params['inventory_id'],
                }
                for tag in ('tasksequence', 'mdtcust', 'additional_vlans'):
                    if module.params[tag]:
                        update['provision'][tag] = module.params[tag]
                if module.params['users'] is not None:
                    asset['users'] = module.params['users']
                missing = has_nones(update)
                if missing:
                    module.fail_json(msg="Missing required fields: %s" % ", ".join(missing))
                changed = True
                if module.params['wait_event'] is None:
                    module.params['wait_event'] = 'provisioned'
                if not module.check_mode:
                    response = request('patch', '/asset/%s' % asset['service_tag'], update)
                    if response.status_code not in (200, 201):
                        module.fail_json(msg="Failed to provision machine: %s" % response.content)
                    asset = json.loads(response.content)
            elif asset['state'] == 'in-use':
                if module.params['asset_type'] == 'vmcluster':
                    update = {
                        'version': asset['version'],
                        'log': module.params['log'],
                        'managers': module.params['managers'],
                        'service_tag': module.params['service_tag'],
                        'parent': module.params['parent'],
                        'owner': module.params['owner'],
                        'managers': module.params['managers'],
                        'storage': [module.params['storage']],
                        'hypervisors': module.params['hypervisors'],
                        'url': module.params['url'],
                        'inventory_id': module.params['inventory_id'],
                    }
                    if module.params['users'] is not None:
                        update['users'] = module.params['users']
                    if module.params['nics']:
                        update['nics'] = module.params['nics']
                    if any([asset.get(x, None) != update[x] for x in update if x not in ('log',)]):
                        changed = True
                        if not module.check_mode:
                            response = request('patch', '/asset/%s' % asset['service_tag'], update)
                            if response.status_code not in (200, 201):
                                module.fail_json(msg="Failed to update cluster: %s" % response.content)
                            asset = json.loads(response.content)
                else:
                    if (asset['provision']['os'] != module.params['os'] or
                        asset['provision']['hostname'] != module.params['hostname'] or
                        asset['provision']['storage']['os'].get('pdisks', []) != module.params['storage']['os'].get('pdisks', []) or
                        asset['provision']['storage']['os'].get('raid', []) != module.params['storage']['os'].get('raid', [])):
                        module.fail_json(msg="cannot reprovision asset without decommission first (state=absent)")
                    update = {
                        'version': asset['version'],
                        'log': module.params['log'],
                        'owner_can_login': module.params['owner_can_login'],
                        'managers': module.params['managers'],
                        'provisioning': True,
                        'provision': {
                            'vlan': vlan,
                            'vlans': [],
                            'storage': module.params['storage'],
                            'aliases': module.params['aliases'],
                        },
                    }
                    for vlan in asset['provision'].get('vlans', []):
                        for new_vlan in vlans:
                            if (('cidr' in vlan and 'cidr' in new_vlan and new_vlan['cidr'] == vlan['cidr']) or
                                ('name' in vlan and 'name' in new_vlan and new_vlan['name'] == vlan['name'])):
                                update['provision']['vlans'].append(vlan)
                                break
                    for new_vlan in vlans:
                        for vlan in asset['provision'].get('vlans', []):
                            if (('cidr' in new_vlan and 'cidr' in vlan and new_vlan['cidr'] == vlan['cidr']) or
                                ('name' in new_vlan and 'name' in vlan and new_vlan['name'] == vlan['name'])):
                                break
                        else:
                            update['provision']['vlans'].append(new_vlan)
                    if (update['managers'] != asset.get('managers', []) or
                        ('name' in update['provision']['vlan'] and 'name' in asset['provision']['vlan'] and
                         update['provision']['vlan']['name'] != asset['provision']['vlan']['name']) or
                        ('cidr' in update['provision']['vlan'] and 'cidr' in asset['provision']['vlan'] and
                         update['provision']['vlan']['cidr'] != asset['provision']['vlan']['cidr']) or
                        ('ip' in update['provision']['vlan'] and 'ip' in asset['provision']['vlan'] and
                         update['provision']['vlan']['ip'] != asset['provision']['vlan']['ip']) or
                        update['provision']['vlans'] != asset['provision'].get('vlans', []) or
                        dict_diff(module.params['storage'], asset['provision']['storage'])):
                        changed = True
                        if module.params['wait_event'] is None:
                            module.params['wait_event'] = 'reprovisioned'
                        if not module.check_mode:
                            response = request('patch', '/asset/%s' % asset['service_tag'], update)
                            if response.status_code not in (200, 201):
                                module.fail_json(msg="Failed to reprovision machine: %s" % response.content)
                            asset = json.loads(response.content)
            else:
                module.fail_json(msg="asset %s is in unexpected state for provisioning: %s" % (asset['service_tag'], asset['state']))
        else:
            module.fail_json(msg="Unexpected status code %d from /asset/%s" % (response.status_code, module.params['service_tag']))

        if changed and not module.check_mode and module.params['wait']:
            path = '/event/feed/'
            event_found = False
            while not event_found:
                response = request('get', path)
                if response.status_code == 204:
                    continue
                elif response.status_code != 200:
                    module.fail_json(msg="Failed to get events %d: %s" % (response.status_code, response.content))
                events = json.loads(response.content)
                for event in events:
                    if (event['asset_id'] == asset['id'] and
                        event['event'] == module.params['wait_event'] and
                        datetime.datetime.strptime(event['timestamp'], "%Y-%m-%dT%H:%M:%S.%fZ") >= start_time):
                        event_found = True
                path = '/event/feed/?id=%s' % events[-1]['id']

        module.exit_json(changed=changed, asset=asset)

    elif module.params['state'] == 'absent':
        if response.status_code == 200:
            changed = True
            if not module.check_mode:
                response = request('delete', '/asset/%s' % module.params['service_tag'], {'log': module.params['log']})
                if response.status_code != 204:
                    module.fail_json(msg="Failed to delete asset %s: %s" % (module.params['service_tag'], response.content))
        module.exit_json(changed=changed)

# import module snippets
from ansible.module_utils.basic import *
if __name__ == "__main__":
    main()
