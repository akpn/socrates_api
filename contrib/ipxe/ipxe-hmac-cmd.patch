diff --git a/src/config/general.h b/src/config/general.h
index 3c14a2cd..9b6f01ce 100644
--- a/src/config/general.h
+++ b/src/config/general.h
@@ -154,6 +154,7 @@ FILE_LICENCE ( GPL2_OR_LATER_OR_UBDL );
 //#define PROFSTAT_CMD		/* Profiling commands */
 //#define NTP_CMD		/* NTP commands */
 //#define CERT_CMD		/* Certificate management commands */
+#define HMAC_CMD		/* HMAC commands */
 
 /*
  * ROM-specific options
diff --git a/src/hci/commands/hmac_cmd.c b/src/hci/commands/hmac_cmd.c
new file mode 100644
index 00000000..abef6727
--- /dev/null
+++ b/src/hci/commands/hmac_cmd.c
@@ -0,0 +1,128 @@
+/*
+ * Copyright (C) 2009 Daniel Verkamp <daniel@drv.nu>.
+ * Copyright (C) 2017 Klarna Bank AB
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ */
+
+FILE_LICENCE ( GPL2_OR_LATER );
+
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <getopt.h>
+#include <ipxe/command.h>
+#include <ipxe/parseopt.h>
+#include <ipxe/image.h>
+#include <ipxe/crypto.h>
+#include <ipxe/md5.h>
+#include <ipxe/sha1.h>
+#include <ipxe/sha256.h>
+#include <ipxe/sha512.h>
+#include <ipxe/hmac.h>
+#include <usr/imgmgmt.h>
+
+/** @file
+ *
+ * HMAC commands
+ *
+ */
+
+/** "hmac" options */
+struct hmac_options {};
+
+/** "hmac" option list */
+static struct option_descriptor hmac_opts[] = {};
+
+/** "hmac" command descriptor */
+static struct command_descriptor hmac_cmd =
+	COMMAND_DESC ( struct hmac_options, hmac_opts, 3, 3,
+		       "<digest> <key> <message>" );
+
+const struct setting hmac_setting __setting ( SETTING_CRYPTO, hmac ) = {
+	.name = "hmac",
+	.description = "Computed HMAC",
+	.type = &setting_type_hex,
+};
+
+/**
+ * The "hmac" command
+ *
+ * @v argc		Argument count
+ * @v argv		Argument list
+ * @ret rc		Return status code
+ */
+static int hmac_exec ( int argc, char **argv ) {
+	struct hmac_options opts;
+	struct digest_algorithm *digest = NULL;
+	const char *message;
+	size_t message_len;
+	int rc;
+
+	/* Parse options */
+	if ( ( rc = parse_options ( argc, argv, &hmac_cmd, &opts ) ) != 0 )
+		return rc;
+
+	if ( ( argc - optind ) != 3 ) {
+		printf ( "invalid usage.\n" );
+		return 1;
+	}
+
+	if ( strcmp ( argv[optind], "MD5" ) == 0)
+		digest = &md5_algorithm;
+	else if ( strcmp ( argv[optind], "SHA1" ) == 0)
+		digest = &sha1_algorithm;
+	else if ( strcmp ( argv[optind], "SHA224" ) == 0)
+		digest = &sha224_algorithm;
+	else if ( strcmp ( argv[optind], "SHA256" ) == 0)
+		digest = &sha256_algorithm;
+	else if ( strcmp ( argv[optind], "SHA384" ) == 0)
+		digest = &sha384_algorithm;
+	else if ( strcmp ( argv[optind], "SHA512" ) == 0)
+		digest = &sha512_algorithm;
+	else if ( strcmp ( argv[optind], "SHA512_256" ) == 0)
+		digest = &sha512_256_algorithm;
+	else if ( strcmp ( argv[optind], "SHA512_224" ) == 0)
+		digest = &sha512_224_algorithm;
+	else {
+		printf ( "invalid digest.\n" );
+		return 1;
+	}
+
+	message = argv[optind + 2];
+	message_len = strlen ( message );
+
+	uint8_t key[digest->ctxsize];
+	size_t key_len = strlen ( argv[optind + 1] );
+	uint8_t digest_ctx[digest->ctxsize];
+	uint8_t hmac[digest->digestsize];
+
+	memcpy ( key, argv[optind + 1], key_len );
+
+	hmac_init ( digest, digest_ctx, key, &key_len );
+	hmac_update ( digest, digest_ctx, message, message_len );
+	hmac_final ( digest, digest_ctx, key, &key_len, hmac );
+
+	if ( ( rc = store_setting ( NULL, &hmac_setting, hmac, digest->digestsize ) ) != 0 )
+		return rc;
+
+	return 0;
+}
+
+struct command hmac_command __command = {
+	.name = "hmac",
+	.exec = hmac_exec,
+};
