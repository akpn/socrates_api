#!/usr/bin/python -tt

import json
from Forti import FortiMgr

def main() :
  module = AnsibleModule(
        argument_spec = dict(
            username = dict(type='str', required=True),
            password = dict(type='str', required=True, no_log=True),
            endpoint = dict(type='str', required=True),
            adom = dict(type='str', required=True),
            device = dict(type='str', required=True),
            vdom = dict(type='str', required=True),
            zone = dict(type='str', required=True),
            interface = dict(type='str', required=False),
        ),
    )

  # other vars
  changed = False
  result = []

  # Login
  f = FortiMgr(module.params['endpoint'])
  r = f.login(module.params['username'], password=module.params['password'])
  result.append(r)
  if r[0] == False:
    module.fail_json(msg="Failed to log in %s." % module.params['username'])

  # Make sure this is the only interface in the zone before wiping it
  if module.params['interface']:
    zones = f.get_zones(module.params['adom'])['result'][0]['data']
    for zone in zones:
      if zone['name'] != module.params['zone']:
        continue
      for dynamic_mapping in zone.get('dynamic_mapping', []):
        for scope in dynamic_mapping.get('_scope', []):
          if (scope['name'] == module.params['device'] and
              scope['vdom'] == module.params['vdom']):
            break
        else:
          continue
        local_intf = dynamic_mapping.get('local-intf', [])
        if isinstance(local_intf, (unicode, str)):
          local_intf = [local_intf]
        if len(local_intf) != 1 or local_intf[0] != module.params['interface']:
          module.exit_json(skipped=True, msg="Zone contains other interfaces: %r" % local_intf)

  for package in f.get_policy_packages(module.params['adom'])['result'][0]['data']:
    if (package['dev'] == module.params['device'] and
        package['vdom'] == module.params['vdom']):
      break
  else:
    module.fail_json(msg="Failed to find policy package")

  policies = f.get_policies(module.params['device'], module.params['vdom'],
    filter=[
      ["srcintf", "contain", module.params['zone']], "||",
      ["dstintf", "contain", module.params['zone']]
    ]
  )['result'][0]['data']
  if policies is not None:
    for policy in policies:
      changed = True
      r = f.delete_policy(module.params['adom'], package['pkg'], policy['policyid'])
      result.append(r)

  f.policy_package_install(module.params['adom'], module.params['device'],
    package['pkg'], preview=False)

  # Logout
  try:
    f.logout()
  except:
    pass

  module.exit_json(changed=changed, result=result)

# import module snippets
from ansible.module_utils.basic import AnsibleModule
if __name__ == "__main__":
    main()
