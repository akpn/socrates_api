#!/usr/bin/env python
from ansible.module_utils.basic import AnsibleModule
import Forti
import netaddr
import re

interface_name_re = re.compile(r'[^A-Za-z0-9-_]')

def main():
    module = AnsibleModule(
        argument_spec=dict(
            endpoint=dict(type='str', required=True),
            username=dict(type='str', required=True),
            password=dict(type='str', required=True, no_log=True),
            adom=dict(type='str', required=True),
            vdom=dict(type='str', required=True),
            device=dict(type='str', required=True),
            network=dict(type='dict', required=True),
            vlan_min=dict(type='int', required=False, default=2),
            vlan_max=dict(type='int', required=False, default=4095),
            strategy=dict(type='str', required=False, default='last', choices=['first', 'last']),
            hostname=dict(type='str', required=False),
        ),
        supports_check_mode=True,
    )

    ids = {}
    ids['netmask'] = str(netaddr.IPNetwork("%s/%s" % (module.params['network']['network'], module.params['network']['length'])).netmask)

    mgr = Forti.FortiMgr(module.params['endpoint'])
    r = mgr.login(module.params['username'], module.params['password'])
    if not r[0]:
        module.fail_json(msg="Failed to login: %r" % r)

    interfaces = mgr.get_interfaces(module.params['adom'], module.params['device'],
                                    fields=["name", "vlanid", "ip", "type"],
                                    filter=[["status", "==", 1], "&&", ["ip", "!=", ["0.0.0.0", "0.0.0.0"]], "&&", ["vdom", "==", module.params['vdom']]]
                                    )['result'][0]['data']
    vlan_ids = set()
    interface_names = set()
    for interface in interfaces:
        if 'vlanid' not in interface:
            continue
        vlan_ids.add(interface['vlanid'])
        interface_names.add(interface['name'])
        if interface['ip'][0] == module.params['network']['ipam']['gateway']:
            ids['vlan_id'] = interface['vlanid']
            ids['interface'] = interface['name']

    zones = mgr.get_zones(module.params['adom'])
    zone_names = set()
    for zone in zones['result'][0]['data']:
        zone_names.add(zone['name'])
        if 'interface' in ids:
            for mapping in zone.get('dynamic_mapping') or []:
                if ('_scope' in mapping
                        and mapping['_scope'][0]['name'] == module.params['device']
                        and mapping['_scope'][0]['vdom'] == module.params['vdom']
                        and mapping['local-intf'] == ids['interface']):
                    ids['zone'] = zone['name']

    changed = any(map(lambda x: x not in ids, ['vlan_id', 'interface', 'zone']))
    if 'vlan_id' not in ids:
        elsewhere_ids = set(map(lambda x: x['vlan_id'], module.params['network']['domains'].values())) - set([0])
        if len(elsewhere_ids) == 1:
            elsewhere_id = elsewhere_ids.pop()
            if (elsewhere_id not in vlan_ids
                    and elsewhere_id > module.params['vlan_min']
                    and elsewhere_id < module.params['vlan_max']
                ):
                ids['vlan_id'] = elsewhere_id
        if 'vlan_id' not in ids:
            if module.params['strategy'] == 'first':
                ids['vlan_id'] = sorted(set(range(module.params['vlan_min'], module.params['vlan_max'])) - vlan_ids)[0] + 1
            elif module.params['strategy'] == 'last':
                ids['vlan_id'] = max(vlan_ids) + 1
    if 'interface' not in ids:
        ids['interface'] = module.params['network']['ipam']['name']
        ids['interface'] = interface_name_re.sub("", ids['interface'])
        ids['interface'] = ids['interface'][:12]
        if not ids['interface'].endswith('_if'):
            ids['interface'] += "_if"
        while ids['interface'] in interface_names:
            prefix = ids['interface'][:-3]
            if len(prefix) == 12:
                prefix = prefix[:-1]
            if prefix[-1].isdigit():
                prefix = "%s%d" % (prefix[:-1], int(prefix[-1]) + 1)
            else:
                prefix += "0"
            ids['interface'] = prefix + "_if"
    if 'zone' not in ids:
        ids['zone'] = ids['interface'].replace("_if", "_z")
    if 'hostname' not in ids:
        ids['hostname'] = ids['interface'].replace("_", "-") + "." + module.params['hostname']

    module.exit_json(msg="IDs picked", changed=changed, **ids)


if __name__ == "__main__":
    main()
